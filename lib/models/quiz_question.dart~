import 'option.dart';
"progress": 0
"id": 60,
"name": null,
"title": "Genetics and Evolution",
"description": "",
"difficulty_level": null,
"topic": "The Molecular Basis of Inheritance",
"time": "2024-07-15T00:00:00.000+05:30",
"is_published": true,
"created_at": "2024-07-15T17:42:08.623+05:30",
"updated_at": "2024-09-23T18:43:29.210+05:30",
"duration": 15,
"end_time": "2024-07-16T00:00:00.000+05:30",
"negative_marks": "1.0",
"correct_answer_marks": "4.0",
"shuffle": true,
"show_answers": true,
"lock_solutions": false,
"is_form": false,
"show_mastery_option": false,
"reading_material": null,
"quiz_type": null,
"is_custom": false,
"banner_id": null,
"exam_id": null,
"show_unanswered": false,
"ends_at": "2025-01-18",
"lives": null,
"live_count": "Free Test",
"coin_count": -1,
"questions_count": 10,
"daily_date": "January 17, 2025",
"max_mistake_count": 9,
"reading_materials": [],
"questions": [
class Question {
  final int id;
  final String description;
  final String? difficultyLevel;
  final String topic;
  final bool isPublished;
  final DateTime createdAt;
  final DateTime updatedAt;
  final String detailedSolution;
  final bool isMandatory;
  final bool showInFeed;
  final String? pyqLabel;
  final int topicId;
  final int? readingMaterialId;
  final DateTime? fixedAt;
  final String? fixSummary;
  final String? createdBy;
  final String? updatedBy;
  final String? quizLevel;
  final String questionFrom;
  final String? language;
  final String? photoUrl;
  final String? photoSolutionUrl;
  final bool isSaved;
  final String? tag;
  final List<Option> options;

  Question({
    required this.id,
    required this.description,
    this.difficultyLevel,
    required this.topic,
    required this.isPublished,
    required this.createdAt,
    required this.updatedAt,
    required this.detailedSolution,
    required this.isMandatory,
    required this.showInFeed,
    this.pyqLabel,
    required this.topicId,
    this.readingMaterialId,
    this.fixedAt,
    this.fixSummary,
    this.createdBy,
    this.updatedBy,
    this.quizLevel,
    required this.questionFrom,
    this.language,
    this.photoUrl,
    this.photoSolutionUrl,
    required this.isSaved,
    this.tag,
    required this.options,
  });

  /// Factory constructor to create a Question object from JSON
  factory Question.fromJson(Map<String, dynamic> json) {
    return Question(
      id: json['id'],
      description: json['description'],
      difficultyLevel: json['difficulty_level'],
      topic: json['topic'],
      isPublished: json['is_published'],
      createdAt: DateTime.parse(json['created_at']),
      updatedAt: DateTime.parse(json['updated_at']),
      detailedSolution: json['detailed_solution'],
      isMandatory: json['is_mandatory'],
      showInFeed: json['show_in_feed'],
      pyqLabel: json['pyq_label'],
      topicId: json['topic_id'],
      readingMaterialId: json['reading_material_id'],
      fixedAt: json['fixed_at'] != null ? DateTime.parse(json['fixed_at']) : null,
      fixSummary: json['fix_summary'],
      createdBy: json['created_by'],
      updatedBy: json['updated_by'],
      quizLevel: json['quiz_level'],
      questionFrom: json['question_from'],
      language: json['language'],
      photoUrl: json['photo_url'],
      photoSolutionUrl: json['photo_solution_url'],
      isSaved: json['is_saved'],
      tag: json['tag'],
      options: (json['options'] as List)
          .map((option) => Option.fromJson(option))
          .toList(),
    );
  }

  /// Method to convert a Question object to JSON
  Map<String, dynamic> toJson() {
    return {
      'id': id,
      'description': description,
      'difficulty_level': difficultyLevel,
      'topic': topic,
      'is_published': isPublished,
      'created_at': createdAt.toIso8601String(),
      'updated_at': updatedAt.toIso8601String(),
      'detailed_solution': detailedSolution,
      'is_mandatory': isMandatory,
      'show_in_feed': showInFeed,
      'pyq_label': pyqLabel,
      'topic_id': topicId,
      'reading_material_id': readingMaterialId,
      'fixed_at': fixedAt?.toIso8601String(),
      'fix_summary': fixSummary,
      'created_by': createdBy,
      'updated_by': updatedBy,
      'quiz_level': quizLevel,
      'question_from': questionFrom,
      'language': language,
      'photo_url': photoUrl,
      'photo_solution_url': photoSolutionUrl,
      'is_saved': isSaved,
      'tag': tag,
      'options': options.map((option) => option.toJson()).toList(),
    };
  }

  /// Method to check if the question has a correct answer option
  bool hasCorrectAnswer() {
    return options.any((option) => option.isCorrect);
  }

  /// Method to get the correct option(s)
  List<Option> getCorrectOptions() {
    return options.where((option) => option.isCorrect).toList();
  }
}
